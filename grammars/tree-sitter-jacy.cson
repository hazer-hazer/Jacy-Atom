name: 'Jacy'
scopeName: 'source.jc'
type: 'tree-sitter'
parser: 'tree-sitter-jacy'

fileTypes: ['jc']

injectionRegex: '^jc$|^JC$|jc|Jacy|jacy'

comments:
    start: '// '

scopes:
    'source_file': 'source.jc'
    # 'ideantifier': [
        # {match: '^[A-Z\\d_]$', scopes: 'constant.other'}
    # ]

    # Modifiers

    # Keywords
    '"if"': 'keyword.control.if'
    '"elif"': 'keyword.control.elif'
    '"else"': 'keyword.control.else'
    '"in"': 'keyword.control.in'
    '"for"': 'keyword.control.for'
    '"loop"': 'keyword.control.loop'
    '"while"': 'keyword.control.while'
    '"match"': 'keyword.control.match'
    '"return"': 'keyword.control.return'
    '"break"': 'keyword.control.break'
    '"continue"': 'keyword.control.continue'
    '"ref"': 'keyword.control.ref'
    '"let"': 'keyword.control.let'

    '"let"': 'storage.keyword.let'
    '"const"': 'storage.keyword.const'
    '"type"': 'storage.keyword.type'
    '"func"': 'storage.keyword.func'
    '"enum"': 'storage.keyword.enum'
    '"mod"': 'storage.keyword.mod'
    '"trait"': 'storage.keyword.trait'
    '"impl"': 'storage.keyword.impl'
    '"struct"': 'storage.keyword.struct'
    '"pub"': 'storage.keyword.pub'

    '"as"': 'keyword.operator.as'
    '":"': 'keyword.operator.constraint'
    '"::"': 'keyword.operator.path'
    '"="': 'keyword.operator.assign'
    'prefix_expr > "*"': 'keyword.operator.dereference'
    'prefix_expr > "!"': 'keyword.operator.not'

    # punctuations
    '";"': 'punctuation.terminator.statement'
    '"["': 'punctuation.definition.begin.bracket.square'
    '"]"': 'punctuation.definition.end.bracket.square'
    '","': 'punctuation.separator.delimiter'
    '"{"': 'punctuation.section.block.begin.bracket.curly'
    '"}"': 'punctuation.section.block.end.bracket.curly'
    '"("': 'punctuation.section.parens.begin.bracket.round'
    '")"': 'punctuation.section.parens.end.bracket.round'

    # Literals
    'unit_expr': 'constant.language.unit'
    'char_lit': 'string.quoted.single'
    'string_lit': 'string.quoted.double'
    'bool_lit': 'constant.language.boolean'
    'int_lit': 'constant.numeric.decimal'
    'float_lit': 'constant.numeric.decimal'
    'lit_pat > "-"' : 'constant.numeric.neg'

    # Operators
    '"and"': 'keyword.control.and'
    '"or"': 'keyword.control.or'

    '''
    self_parameter > "&",
    ref_pat > "&",
    ref_expr > "&",
    ref_type > "&"
    ''' : 'keyword.operator.reference'


    '''
    assign_expr > "+=",
    assign_expr > "-=",
    compound_assignment_expr > "/=",
    compound_assignment_expr > "*=",
    compound_assignment_expr > "%=",
    compound_assignment_expr > "<<=",
    compound_assignment_expr > ">>=",
    ''' : 'keyword.operator.math.assign'

    '''
    infix_expr > "+",
    infix_expr > "-",
    infix_expr > "/",
    infix_expr > "*",
    infix_expr > "%",
    infix_expr > "**",
    infix_expr > "<<",
    infix_expr > ">>",
    ''' : 'keyword.operator.math'

    '''
    assign_expr > "+=",
    assign_expr > "-=",
    assign_expr > "/=",
    assign_expr > "*=",
    assign_expr > "%=",
    assign_expr > "<<=",
    assign_expr > ">>=",
    ''' : 'keyword.operator.math.assign'

    '''
    infix_expr > "&",
    infix_expr > "|",
    infix_expr > "^",
    ''' : 'keyword.operator.logic.bitwise'

    '''
    infix_expr > "<",
    infix_expr > ">",
    infix_expr > "==",
    infix_expr > "<=",
    infix_expr > ">=",
    infix_expr > "!=",
    ''' : 'keyword.operator.logic.bitwise'

    '''
    infix_expr > "and",
    infix_expr > "or",
    ''' : 'keyword.operator.logic.boolean'
